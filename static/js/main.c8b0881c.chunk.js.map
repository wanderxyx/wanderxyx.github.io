{"version":3,"sources":["mock/api.js","components/TableList.js","App.js","serviceWorker.js","index.js"],"names":["fakeAjaxTime","api","TableData","Object","classCallCheck","this","interVal","current","take","arguments","length","undefined","colunm","interval","self","Promise","resolve","reject","needreject","setTimeout","_fakeData","column","rowCount","result","title","rows","col","push","concat","row","unshift","options","preventDefault","probeType","mouseWheel","scrollX","scrollY","disableMouse","disablePointer","lockDirection","disableTouch","bounce","useTransition","str","TableList","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","cols","rowsStyle","colsStyle","data","pwidth","tableLength","currentDataPos","_this2","scroll","iScroll","on","setState","transform","x","y","console","log","getComputedStyle","refs","rollingTable","split","parseInt","parseFloat","document","body","offsetWidth","maxScrollY","getMoreData","getData","prevProps","prevState","querySelectorAll","refresh","getDataList","columnsW","forEach","item","_this$state2","react_default","a","createElement","className","border","cellPadding","cellSpacing","ref","style","width","map","index","key","react","objectSpread","i","idx","PureComponent","App","components_TableList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8b0881c.chunk.js","sourcesContent":["const rejectMsg = '主动抛出了异常';\nconst fakeAjaxTime = 200;\nconst dataColumn = 5;\nconst dataRow = 5;\n\nclass TableData {\n  constructor() {\n    this.interVal = fakeAjaxTime;\n\n  }\n\n  // 模拟异步获取数据\n  // @current：当前的数据位置\n  // @take：获取多少条\n  // @colunm：数据列数\n  getDataList(\n    current, take = dataRow, colunm = dataColumn, interval = this.interVal) {\n    const self = this;\n    return new Promise((resolve, reject, needreject) => {\n      setTimeout(() => {\n        if (needreject) {\n          reject(rejectMsg);\n        }\n        resolve(self._fakeData(colunm, take, current));\n      }, interval);\n    });\n  }\n\n  // 伪造一个数据对象\n  // @column：列数\n  // @row：行数\n  _fakeData(column, rowCount, current) {\n    const result = {title: [], rows: []};\n    for (let col = 0; col < column; col++) {\n      result.title.push(`${col}`);\n    }\n    for (let row = current; row < rowCount + current; row++) {\n      result.rows.push([]);\n      for (let col = 0; col < column; col++) {\n        result.rows[row - current].push(`${row}`);\n      }\n    }\n\n    if (current === 0) {\n      result.rows.unshift(result.title);\n    }\n    return result;\n  }\n\n}\n\nexport default new TableData();\n","import React, { PureComponent, Fragment } from 'react';\nimport iScroll from \"iscroll/build/iscroll-probe\";\nimport TableData from '../mock/api';\nimport './index.css';\n\n// iScroll配置\nconst options = {\n  preventDefault: true,\n  probeType: 3,\n  mouseWheel: false,\n  scrollX: true,\n  scrollY: true,\n  disableMouse: true,\n  disablePointer: true,\n  lockDirection: true,\n  disableTouch: false,\n  bounce: false,\n  useTransition: true,\n}\n\nconst str = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'];\n\nconst take = 100;\nconst columns = 10;\nconst columnsW = 80;\nconst interval = 100;\n\nclass TableList extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      cols: [],\n      rows: [],\n      rowsStyle: {\n      },\n      colsStyle: {},\n      data: {},\n      pwidth: '',\n      tableLength: 0,\n      currentDataPos: 0,\n    }\n  }\n\n  componentDidMount() {\n    const self = this;\n    // 初始化iscroll\n    this.scroll = new iScroll('.wrapper', options);\n    this.scroll.on('scroll', () => {\n      self.setState({\n        colsStyle: {\n          transform: `translate(${-1 * this.scroll.x}px, 0px) translateZ(0px)`,\n        },\n        rowsStyle: {\n          transform: `translate(0px, ${-1 * this.scroll.y}px) translateZ(0px)`,\n        },\n      })\n    });\n    this.scroll.on('scrollEnd', () => {\n      console.log(1)\n      if (getComputedStyle(self.refs.rollingTable).transform.split(',')[4] === 0) {\n        self.setState({\n          colsStyle: {\n            transform: 'translate(0px, 0px) translateZ(0px)',\n          },\n        })\n      }\n      if (parseInt(getComputedStyle(this.refs.rollingTable).transform.split(',')[5]) === 0) {\n        self.setState({\n          rowsStyle: {\n            transform: 'translate(0px, 0px) translateZ(0px)',\n          },\n        })\n      }\n      if (1041 + parseFloat(getComputedStyle(this.refs.rollingTable).transform.split(',')[4]) === document.body.offsetWidth) {\n        self.setState({\n          colsStyle: {\n            transform: `translate(${1041-document.body.offsetWidth}px, 0px) translateZ(0px)`,\n          },\n        })\n      }\n      if ((this.scroll.y-500) <= this.scroll.maxScrollY) {\n        self.getMoreData()\n      }\n    });\n    this.getData();\n  }\n\n  async componentDidUpdate(prevProps, prevState) {\n    const { tableLength } = this.state;\n    if (prevState.tableLength !== tableLength) {\n      const cols = document.querySelectorAll('.cols');\n      const rows = document.querySelectorAll('.rows');\n      await this.setState({\n        cols,\n        rows,\n      })\n      this.scroll.refresh();\n    }\n  };\n\n  async getData() {\n    const { currentDataPos } = this.state;\n    const data = await TableData.getDataList(0, take, columns, 0);\n    this.setState({\n      data,\n      currentDataPos: currentDataPos + take,\n      pwidth: `${columnsW * columns + 41}px`,\n      tableLength: data.rows.length,\n    })\n  };\n\n  async getMoreData() {\n    const { currentDataPos, data } = this.state;\n    const tableData = await TableData.getDataList(currentDataPos, take, columns, interval);\n    tableData.rows.forEach(item => {\n      data.rows.push(item);\n    });\n    this.setState({\n      data,\n      currentDataPos: currentDataPos + take,\n      tableLength: data.rows.length,\n    })\n  };\n\n  render() {\n    const { rowsStyle, colsStyle, data, pwidth } =  this.state;\n    return (\n      <div className='container'>\n        <div className=\"cross\"></div>\n        <div className=\"wrapper\">\n          <table className=\"table\" border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" ref=\"rollingTable\" style={{width: pwidth}}>\n            <tbody>\n              {\n                data.rows ? data.rows.map((row, index) => (\n                  <tr key={index}>\n                    {\n                      index === 0 ? (\n                        <Fragment>\n                          <td className=\"rows\" style={{...rowsStyle}}>{index}</td>\n                          {\n                            row.map((i, idx) => (\n                              <td className=\"rows\" key={idx} style={{...rowsStyle}}>{str[idx]}</td>\n                            ))\n                          }\n                        </Fragment>\n                      ) : null\n                    }\n                    {\n                      index > 1 ? (\n                        <Fragment>\n                          <td className=\"cols\" style={{...colsStyle}}>{index-1}</td>\n                          {\n                            row.map((col, idx) => (\n                              <td key={idx}>{col}</td>\n                            ))\n                          }\n                        </Fragment>\n                      ) : null\n                    }\n                  </tr>\n                )) :null\n              }\n            </tbody>\n          </table>\n          <div className=\"loading-wrapper\"></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TableList;","import React, { Component } from 'react';\nimport TableList from './components/TableList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TableList></TableList>\n        <section>\n          数据加载中...\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}